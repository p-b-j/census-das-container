# Main file for US+PR DHCH runs with manual topdown

[DEFAULT]
# root specifies the root location for all files; testdir specifies ???; mode specifies ???
# For the demo, the root in the current directory
include=../default.ini

[logging]
logfilename: DAS
loglevel: INFO
logfolder: logs

[ENVIRONMENT]
DAS_FRAMEWORK_VERSION: 0.0.1
GRB_ISV_NAME: Census
GRB_APP_NAME: DAS
GRB_Env3: 0
GRB_Env4:

[python]

[gurobi]
OutputFlag: 1
OptimalityTol: 1e-4
BarConvTol: 1e-8
BarQCPConvTol: 0
BarIterLimit: 1000
FeasibilityTol: 1e-9
Threads: 4
Presolve: -1
NumericFocus: 3

# Method controls alg used. -1=automatic, 0=primal simplex, 1=dual simplex, 2=barrier
Method: -1

# TimeLimit: 1800
# Do we explicitly run presolve in Python?  1 or 0
python_presolve: 1


[geodict]
#smallest to largest (no spaces)
geolevel_names: Block,Block_Group,Tract,Tract_Group,County,State,US+PR
#(largest geocode length to smallest, put 0 for US or US+PR (i.e. above state) level)
geolevel_leng: 16,14,11,8,5,2,0

[setup]
setup: programs.das_setup.DASDecennialSetup

# Spark config stuff
spark.name: DAS_NAT_TEST_PRODUCT
#local[6] tells spark to run locally with 6 threads
#spark.master: local[9]
#Error , only writes to log if there is an error (INFO, DEBUG, ERROR)
spark.loglevel: ERROR

[reader]
INCLUDE=Reader/h1_read.ini
Household.path: $DAS_S3ROOT/title13_input_data/table10_20190610/
Unit.path: $DAS_S3ROOT/title13_input_data/table10_20190610/

#comment: ?
numReaderPartitions: 1000
readerPartitionLen: 14
validate_input_data_constraints: False

[engine]
engine: programs.engine.topdown_engine.TopdownEngine

# should we delete the true data after making DP measurments (1 for True or 0 for False)
delete_raw: 0
save_noisy: 0
reload_noisy: 0
check_budget: off

[schema]
schema: H1_SCHEMA

[budget]
epsilon_budget_total: 1


#budget in topdown order (e.g. US, State, .... , Block)
geolevel_budget_prop: 0.15,0.15,0.15,0.15,0.15,.15,0.1



# start with no queries
DPqueries: h1, detailed
queriesprop: 0,  1

[constraints]
#start with none
#the invariants created, (no spaces)
theInvariants.Block: tot,gqhh_vect
#theInvariants.Tract:

#these are the info to build cenquery.constraint objects
theConstraints.Block: total
#theConstraints.Tract:

[writer]
#writer: programs.writer.mdf2020writer.MDF2020HouseholdWriter
#writer: programs.writer.h1writer.H1Writer
writer: programs.writer.multi_writer.MultiWriter
multiwriter_writers: BlockNodeDicts, H1

# Where the data gets written:
output_path: $DAS_S3ROOT/users/$JBID/H1_test9

# Save the output:
produce_flag: 1

# delete existing file (if one) 0 or 1
overwrite_flag: 1

# upload the logfile to the dashboard:
upload_logfile: 1

classification_level: C_U_I//CENS
output_datafile_name: MDF_UNIT
write_metadata: 1
s3cat: 1
s3cat_suffix: .csv
s3cat_verbose: 0

[validator]
validator: programs.stub_validator.validator

#validator: programs.stub_validator.validator
results_fname: /mnt/tmp/WNS_results

[assessment]

[takedown]
takedown: programs.takedown.takedown
delete_output: 0

[experiment]
experiment: programs.experiment.experiment.experiment
run_experiment_flag: 0

[error_metrics]
#error_metrics: programs.metrics.accuracy_metrics.AccuracyMetrics
error_metrics: programs.metrics.error_metrics_stub.ErrorMetricsStub

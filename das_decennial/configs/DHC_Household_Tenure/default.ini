[default]
include=../default.ini




[reader]
# package(s).module_name.class_name of the reader module
reader: programs.reader.table_reader.DASDecennialReader
###
### List of tables (assuming 3 but might be more)
### These tables have decennial census specific process methods
### Table class methods will likely need to be rewritten for other applications
###
tables: Household Pop

privacy_table: Household
constraint_tables: Pop

# table_name.class: specify object type of each table
# Geography.class: table.GeographyTable implement later.
Household.class: programs.reader.spar_table.SparseHistogramTable
Pop.class: programs.reader.spar_table.UnitFromPersonRepartitioned
# table_name.path - location of dir of filename=======

Household.path: s3://uscb-decennial-ite-das/title13_input_data/table12a/
Pop.path: s3://uscb-decennial-ite-das/title13_input_data/table12a/

# file format (assuming all tables will have the same file format)
# we could change this to be "table_name.format_option" if need be.
delimiter: \t
header: True
# If a header exists, this must be set to "True".
# table_name.variables - space delimited ordered list of all the variables in a table.
# Geography.variables: state county block etc will add later.
Household.variables: mafid age hisp sex ten multi geocode hhsize race elderly hhtype
Pop.variables:  mafid age hisp sex ten multi geocode hhsize race elderly hhtype
linkage: geocode

###
### For each variable in each table the following must be included:
### variable_name.type: "str" or "int"
### variable_name.legal: comma-delimited list of legal value expressions.
###                      an expression may be a single value or a range
###                      defined by two values with a "-" between them.
###                      All ranges are assumed to be closed on both ends.
###                      ie the range 0-115 includes both 0 and 115.
###
### For each variable the following is optional:
### variable_name.e2e:  special legal value for the 2018 end to end test.
###
### Note: we do not use table_name.variable_name.attribute to define these.
###

geocode.type: str
geocode.legal: 0000000000000000-9999999999999999
mafid.type: str
mafid.legal: 000000000-999999999
sex.type: int
sex.legal: 0,1
age.type: int
age.legal: 0-115
hisp.type: int
hisp.legal: 0,1
ten.type: int
ten.legal: 0-3
multi.type: int
multi.legal: 0,1
hhsize.type: int
hhsize.legal: 0-99
race.type: int
race.legal: 0-6
elderly.type: int
elderly.legal: 0-3
hhtype.type: int
hhtype.legal: 0-23

###
### Some variables must be recoded before the disclosure engine runs.
### These recodes are very specific to the decennial census and in particular
### the 2018 test. However the module is pluggable or may be removed all together
### if no recodes are necessary. The following predisclosure recode guidelines
### are meant to ensure seemless integration of modules.
### (1) variables should not be recoded in place. ie don't overwrite old variables even if all the recode does is change a variables type from str to int so that it can be used as an array index for example.
### (2) recoder should operate on and return sql Row objects
# package.module_name.class_name for predisclosure recodes
Household.recoder: programs.reader.hh_recoder.table12_recoder
# table_name.recode_variables - list of new variable names
Household.recode_variables: hhage rent size

#UnitData.recoder: programs.reader.e2e_recoder.unit_recoder
#UnitData.recode_variables: gqtype
# variable_name: space delimited list of variables needed to do the recode
hhage: age
rent: ten
size: hhsize
# Include the same attr information as above
hhage.type: int
hhage.legal: 0-8
rent.type: int
rent.legal: 0,1
size.type: int
size.legal: 0-7

###
### The reader needs to know which variables to build the numpy multiarray over.
### For now the only
# rename geography -> groupby for more general use.
Household.geography: geocode
Household.histogram: sex hhage hisp race size hhtype elderly multi
#rent

Pop.geography: geocode
Pop.histogram: sex
Pop.unique: MAFID

[gurobi]
OutputFlag: 1
OptimalityTol: 1e-4
BarConvTol: 1e-8
BarQCPConvTol: 0
BarIterLimit: 1000
FeasibilityTol: 1e-9
Threads: 4
Presolve: -1
NumericFocus: 3
# Method controls alg used. -1=automatic, 0=primal simplex, 1=dual simplex, 2=barrier
Method: 0
# TimeLimit: 1800
# Do we explicitly run presolve in Python?  1 or 0
python_presolve: 1

[writer]
writer: programs.writer.pickled_block_data_writer.PickledBlockDataWriter
#writer: programs.writer.block_node_writer.BlockNodeWriter

keep_attrs: geocode, raw, syn

#Write the Data? 0 or 1
produce_flag: 0

#options for block_node_write
# delete existing file (if one) 0 or 1
overwrite_flag: 0

num_parts: 5000

stats_dir: $DAS_S3ROOT/rpc/upload

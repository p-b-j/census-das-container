[DEFAULT]
# root specifies the root location for all files; testdir specifies ???; mode specifies ???
# For the demo, the root in the current directory
name: DAS
root: .
testdir: .
mode: 0
loglevel: INFO
logfolder: logs

[ENVIRONMENT]
DAS_FRAMEWORK_VERSION: 0.0.1


[geodict]:
#smallest to largest (no spaces)
geolevel_names: Block,Block_Group,Tract,County,State,US+PR
#(largest geocode length to smallest, put 1 for top level) (no spaces)
geolevel_leng: 16,12,11,5,2,1

[setup]
setup: programs.das_setup.DASDecennialSetup

# Spark config stuff
spark.name: DAS_RA
#local[6] tells spark to run locally with 6 threads
#spark.master: local[9]
#Error , only writes to log if there is an error (INFO, DEBUG, ERROR)
spark.loglevel: ERROR

[reader]
# package(s).module_name.class_name of the reader module
reader: programs.reader.table_reader.DASDecennialReader
###
### List of tables (assuming 3 but might be more)
### These tables have decennial census specific process methods
### Table class methods will likely need to be rewritten for other applications
###
tables: PersonData UnitData

privacy_table: PersonData
constraint_tables: UnitData

# table_name.class: specify object type of each table
# Geography.class: table.GeographyTable implement later.
PersonData.class: programs.reader.table.DenseHistogramTable
UnitData.class: programs.reader.table.UnitFromPersonTable
# table_name.path - location of dir of filename=======

PersonData.path: s3://uscb-decennial-ite-das/title13_input_data/table8/
UnitData.path: s3://uscb-decennial-ite-das/title13_input_data/table8/
#PersonData.path: s3://uscb-decennial-ite-das/title13_input_data/table8/ri44.txt
#UnitData.path: s3://uscb-decennial-ite-das/title13_input_data/table8/ri44.txt

# file format (assuming all tables will have the same file format)
# we could change this to be "table_name.format_option" if need be.
delimiter: \t
header: True
# If a header exists, this must be set to "True".
# table_name.variables - space delimited ordered list of all the variables in a table.
# Geography.variables: state county block etc will add later.
PersonData.variables: MAFID geocode white black aian asian nhopi other hispanic sex householder voting hhgq
UnitData.variables: MAFID geocode white black aian asian nhopi other hispanic sex householder voting hhgq
linkage: geocode

###
### For each variable in each table the following must be included:
### variable_name.type: "str" or "int"
### variable_name.legal: comma-delimited list of legal value expressions.
###                      an expression may be a single value or a range
###                      defined by two values with a "-" between them.
###                      All ranges are assumed to be closed on both ends.
###                      ie the range 0-115 includes both 0 and 115.
###
### For each variable the following is optional:
### variable_name.e2e:  special legal value for the 2018 end to end test.
###
### Note: we do not use table_name.variable_name.attribute to define these.
###

geocode.type: str
geocode.legal: 0000000000000000-9999999999999999
MAFID.type: str
MAFID.legal: 000000000-999999999
householder.type: int
householder.legal: 0,1
sex.type: int
sex.legal: 0,1
voting.type: int
voting.legal: 0,1
hispanic.type: int
hispanic.legal: 0,1
white.type: int
white.legal: 0,1
black.type: int
black.legal: 0,1
aian.type: int
aian.legal: 0,1
asian.type: int
asian.legal: 0,1
nhopi.type: int
nhopi.legal: 0,1
other.type: int
other.legal: 0,1
hhgq.type: int
hhgq.legal: 0-7
###
### Some variables must be recoded before the disclosure engine runs.
### These recodes are very specific to the decennial census and in particular
### the 2018 test. However the module is pluggable or may be removed all together
### if no recodes are necessary. The following predisclosure recode guidelines
### are meant to ensure seemless integration of modules.
### (1) variables should not be recoded in place. ie don't overwrite old variables even if all the recode does is change a variables type from str to int so that it can be used as an array index for example.
### (2) recoder should operate on and return sql Row objects
# package.module_name.class_name for predisclosure recodes
PersonData.recoder: programs.reader.e2e_recoder.table8_recoder
# table_name.recode_variables - list of new variable names
PersonData.recode_variables: cenrace

#UnitData.recoder: programs.reader.e2e_recoder.unit_recoder
#UnitData.recode_variables: gqtype
# variable_name: space delimited list of variables needed to do the recode
cenrace: white black aian asian nhopi other
#votingage: age
#gqtype: relation
# Include the same attr information as above
cenrace.type: int
cenrace.legal: 0-62
#votingage.type: int
#votingage.legal: 0,1
#gqtype.type: int
#gqtype.legal: 0-2

###
### The reader needs to know which variables to build the numpy multiarray over.
### For now the only
# rename geography -> groupby for more general use.
PersonData.geography: geocode
PersonData.histogram: hhgq voting hispanic cenrace

UnitData.geography: geocode
UnitData.histogram: hhgq
UnitData.unique: MAFID

[engine]
#engine: programs.engine.topdown.engine
engine: programs.engine.topdown_engine.TopdownEngine

# should we delete the true data after making DP measurments (1 for True or 0 for False)
delete_raw: 0

[budget]
epsilon_budget_total: 1

#budget in topdown order (e.g. US+PR, State, .... , Block)
geolevel_budget_prop: 0.15,0.17,0.17,0.17,0.17,0.17



# DP queries to create, (or leave blank) (total budget proporiton must add to 1.0)
DPqueries: q0,q1,q2, detailed
queriesprop: 0.1,0.2,0.2,  0.5

#ethnicity x race
q0.add_over_margins: 0,1
q0.subset: None

#va x ethnicity x race
q1.add_over_margins: 0
q1.subset: None

#hh_gq x va
q2.add_over_margins: 2,3
q2.subset: None


[constraints]
#the invariants created, (no spaces)
theInvariants: tot,va,gqhh_vect,gqhh_tot
invariants: programs.reader.invariants.InvariantsCreaterPL94

#these are the info to build cenquery.constraint objects
theConstraints: total,voting_age,hhgq_total_lb,hhgq_total_ub,hhgq_va_lb,hhgq_va_ub,nurse_nva_0
constraints: programs.reader.constraints.ConstraintsCreaterPL94


[gurobi]
OutputFlag: 0
OptimalityTol: 1e-9
BarConvTol: 1e-8
BarQCPConvTol: 0
BarIterLimit: 1000
FeasibilityTol: 1e-9
Threads: 1
Presolve: -1
NumericFocus: 3


[writer]
#writer: programs.stub_writer.writer
#writer: programs.mdfwriter.MDFWriter
writer: programs.block_node_writer.BlockNodeWriter
write_type: nodes

# Variables Re-used by multiple writers
# Where the data gets written:
output_path: s3://uscb-decennial-ite-das/users/ashme001/pl94_1
#output_datafile_name: data

#Write the Data? 0 or 1
produce_flag: 1

#options for block_node_write
# delete existing file (if one) 0 or 1
overwrite_flag: 1

minimize_nodes: 1
num_parts: 100

#hadoop or s3
filesystem: s3

# convert the node objects to json representation for saving

##options for mdfwriter
split_by_state: True
tables: PersonData UnitData
# only need next option if produce = True
#split_by_state: false
# only need next option if split_by_state = True
state_codes: 02 01 05 04 06 08 09 11 10 12 13 15 19 16 17 18 20 21 22 25 24 23 26 27 29 28 30 37 38 31 33 34 35 32 36 39 40 41 42 72 44 45 46 47 48 49 51 50 53 55 54 56



[validator]
validator: programs.validator.validator
#validator: programs.stub_validator.validator
results_fname: /mnt/tmp/RA_results

[assessment]

[takedown]
takedown: programs.takedown.takedown
delete_output: True

[experiment]
experiment: programs.experiment.experiment.experiment

run_experiment_flag: 1

experiment_saveloc: s3://uscb-decennial-ite-das/users/ashme001/experimentPL94_828

# we want to save the = q0,q1original data separate from the privatized data; this allows us to do so
# the original data saveloc only works if the save original data flag is on (1)
save_original_data_flag: 0
original_data_saveloc: s3://uscb-decennial-ite-das/experiments/original_data

# when this is turned on (1), the s3 terminal commands to recursively remove the RDD folders
# will be invoked in order to clear it out before the saveAsPickleFile function gets called
overwrite_flag: 1

filesystem: s3

budget_groups: bu1

num_runs: 3

# Budgets follow the order of the geolevels listed in the geodict section
# e.g. Block, Block_Group, Tract, County, State, US+PR

bu1.epsilon_budget_total: 4
bu1.geolevel_budget_prop: 0.15,0.17,0.17,0.17,0.17,0.17
bu1.DPqueries:  q0,q1,q2,detailed
bu1.queriesprop:  0.25, 0.25,0.25,0.25


[error_metrics]
error_metrics: programs.metrics.das_error_metrics.error_metrics
